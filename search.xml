<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dobby 2022/6</title>
      <link href="/2022/07/15/dobby-2022-6/"/>
      <url>/2022/07/15/dobby-2022-6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Zzeasy/blog/main/img/176651e6d359ae950f4dce7ad94fc3e.jpg"></p><p><img src="https://raw.githubusercontent.com/Zzeasy/blog/main/img/742ba351b0f579e742ae47797414740.jpg"></p><p><img src="https://raw.githubusercontent.com/Zzeasy/blog/main/img/271d4995b38fed80f166e51c2cefb8d.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> moment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dobby </tag>
            
            <tag> photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>calculate location by X&amp;Y</title>
      <link href="/2022/07/15/calculate-location-by-X-Y/"/>
      <url>/2022/07/15/calculate-location-by-X-Y/</url>
      
        <content type="html"><![CDATA[<h1 id="根据经纬度获取地理信息"><a href="#根据经纬度获取地理信息" class="headerlink" title="根据经纬度获取地理信息"></a>根据经纬度获取地理信息</h1><blockquote><p>目标: 提供一个经纬度,根据该经纬度计算出所在省,市,区.并且不需要调用外部API</p></blockquote><h2 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h2><p>首先获取地图信息的围栏数据,然后使用jdk中<code>java.awt.Polygon </code>类来处理围栏数据,利用围栏数据绘制一个多边形,然后判断目标经纬度是否包含在这个多边形内</p><p>关于polygon介绍(截取jdk文档):<br>Polygon类封装了一个描述一个封闭区域内二维坐标空间。&#x3D;&#x3D;这个区域是有界的任意数量的线段&#x3D;&#x3D;，其中每一个多边形是由一系列 (x,y)坐标对每对顶点定义一个空的多边形组成的，并连续两对一线，多边形的一条边的端点。 (x,y)点的第一和最后对通过线段闭合多边形加入。</p><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><blockquote><p>获取围栏数据,阿里有提供 <a href="https://datav.aliyun.com/portal/school/atlas/area_selector">https://datav.aliyun.com/portal/school/atlas/area_selector</a></p></blockquote><p>围栏数据每一个省份,每一个市区都是单独的一个json文件,为了方便读取,需要将全部数据爬取下来.<br>爬取阿里地图数据python关键代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">url</span>):</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    jsons = response.json()</span><br><span class="line">    <span class="keyword">return</span> jsons</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crawler</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    jsons = get_url(<span class="string">&quot;https://geo.datav.aliyun.com/areas_v3/bound/&quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>) + <span class="string">&quot;_full.json&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> jsons[<span class="string">&#x27;features&#x27;</span>]:</span><br><span class="line">        <span class="comment"># print(feature[&#x27;properties&#x27;])</span></span><br><span class="line">        <span class="keyword">if</span> feature[<span class="string">&#x27;properties&#x27;</span>][<span class="string">&#x27;childrenNum&#x27;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            crawler(feature[<span class="string">&#x27;properties&#x27;</span>][<span class="string">&#x27;adcode&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 只有子菜单保存,如果需要爬取全部,只需要将else内的代码向外一层</span></span><br><span class="line">            <span class="comment"># features = jsons[&#x27;features&#x27;]</span></span><br><span class="line">            jsonfile = json.dumps(jsons, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">            isExists = os.path.exists(<span class="string">&#x27;gps1&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(isExists)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">                os.mkdir(<span class="string">&#x27;gps1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">id</span>)</span><br><span class="line">            f2 = <span class="built_in">open</span>(<span class="string">&#x27;gps1/&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>) + <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            f2.write(jsonfile)</span><br><span class="line">            f2.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    crawler(<span class="number">100000</span>)  <span class="comment"># 100000为`中国`,从最大的父级开始爬</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;获取到的数据有些格式是有误的,需要遍历读取挨个去检查,一般是coordinates下的[]括号缺失的问题,后面会说排错方法&#x3D;&#x3D;</p><p>获取到的数据如下:<br><img src="https://raw.githubusercontent.com/ZhuyuByte/blog/main/img/20220627183638.png"></p><h2 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h2><p>初始化数据主要分以下几步:</p><ol><li>获取围栏数据文件</li><li>读取围栏数据</li><li>解析围栏数据,构建<code>Polygon</code>二维图</li><li>将Polygon和地理信息放入对应的map中</li></ol><h3 id="1-获取围栏数据文件"><a href="#1-获取围栏数据文件" class="headerlink" title="1. 获取围栏数据文件"></a>1. 获取围栏数据文件</h3><p>将围栏数据放到根目录下(无所谓你放哪),直接<code>new FileReader(file, StandardCharsets.UTF_8)</code>去读取,获取FileReader即可.&#x3D;&#x3D;需要注意:如果文件格式不为UTF_8,建议先用将其重新编码为UTF_8,然后再读取时显示指定编码格式为UTF_8.不然可能会乱码(遇到过)&#x3D;&#x3D;</p><h3 id="2-读取围栏数据"><a href="#2-读取围栏数据" class="headerlink" title="2. 读取围栏数据"></a>2. 读取围栏数据</h3><p>如果围栏文件正常获取到的话,即可开始读取了,直接使用BufferedReader读取,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fileReader);</span><br><span class="line">Bound bound;</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    line = bufferedReader.readLine();</span><br><span class="line">    bound = objectMapper.readValue(line, Bound.class);</span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;这里有些围栏数据文件会缺少层级,导致<code>readValue()</code>时会报<code>Cannot deserialize value of type java.util.ArrayList&lt;java.lang.Float&gt; from Floating-point value (token JsonToken.VALUE_NUMBER_FLOAT)</code>解决方法如下:&#x3D;&#x3D;</p><ol><li>debug启动,断点打在<code>catch&#123;&#125;</code>里</li><li>拿到报错后,查看<code>Exception</code>的<code>_location</code>,确定报错在json中的位置</li><li>在json中找到该位置,补齐中括号,确保层级与实体匹配<code>[]</code></li></ol><h2 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h2><p>信息获取只需要提供经纬度给封装好的方法,然后polygon会自己判断是否在节点内,关键代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用方法获取地理信息</span></span><br><span class="line"><span class="type">BoundProvider</span> <span class="variable">polygon</span> <span class="operator">=</span> BoundProvider.getInstance();</span><br><span class="line">    MapAreaInfo countyInfo, city, province;</span><br><span class="line">    String county;</span><br><span class="line">    <span class="keyword">if</span> ((countyInfo = polygon.getCounty(lon, lat)) == <span class="literal">null</span>) &#123;</span><br><span class="line">        county = <span class="string">&quot;&quot;</span>;<span class="comment">//有些直辖市没用区信息</span></span><br><span class="line">        city = polygon.getCity(lon, lat);</span><br><span class="line">        province = polygon.getProvince(lon, lat);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        county = countyInfo.getName();</span><br><span class="line">        city = polygon.getArea(String.valueOf(countyInfo.getParent().get(<span class="string">&quot;adcode&quot;</span>)));</span><br><span class="line">        <span class="keyword">if</span> (city != <span class="literal">null</span>) province = polygon.getArea(String.valueOf(city.getParent().get(<span class="string">&quot;adcode&quot;</span>)));</span><br><span class="line">        <span class="keyword">else</span> province = polygon.getProvince(lon, lat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polygon判断点是否存在于坐标内</span></span><br><span class="line">polygon.contains((<span class="type">int</span>) (lon * <span class="number">1000</span>), (<span class="type">int</span>) (lat * <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据同步方案</title>
      <link href="/2022/07/15/mysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/"/>
      <url>/2022/07/15/mysql%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="方案一-基于LVM快照进行备份切换"><a href="#方案一-基于LVM快照进行备份切换" class="headerlink" title="方案一 基于LVM快照进行备份切换"></a>方案一 基于LVM快照进行备份切换</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h3><p>MySQL数据库本身并不支持快照功能(sqlServer支持)<br>因此快照备份是指通过<code>文件系统支持的快照功能对数据库进行备份</code><br>备份的前提是<code>将所有数据库文件</code>放在同一文件分区中，然后对该分区进行快照操作</p><p><code>LVM</code>是LINUX系统下对磁盘分区进行管理的一种机制,<code>LVM</code>使用写时复制<code>(copy-on-write)</code>的技术来创建快照——例如，当创建一个快照时，仅复制<code>原始卷中数据</code>的<code>元数据(meta data 注：data block)</code>，并不会有<code>数据的物理操作</code>，因此 快照的创建过程是非常快的.</p><p><img src="https://img-blog.csdnimg.cn/3f4a8da23d5a448f998920fd7323387a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5YWJ5LmL5a2QMDMxNw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="process"></p><p>当快照创建完成，原始卷上有写操作时，快照会跟踪原始卷块的改变，将<code>要改变的数据</code>在改变之前 复制到<code>快照预留的空间</code>里，因此这个原理的实现叫做<code>写时复制</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/05afb106fa01bf6769efcc6372795b61.png" alt="process"></p><h3 id="先决条件和配置"><a href="#先决条件和配置" class="headerlink" title="先决条件和配置"></a>先决条件和配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 所有的InnoDB文件(InnoDB的表空间文件和InnoDB的事务日志)必须是在单个逻辑卷(分区);</span><br><span class="line">你需要绝对的时间点一致性，LVM不能为多于一个卷做某个时间点一致的快照。(这是LVM的一个限制；其他一些系统没有这个问题。)</span><br><span class="line"><span class="bullet">2.</span> 必须在卷组中有足够的空闲空间来创建快照。需要多少取决于负载。当配置系统时，应该留一些未分配的空间以便后面做快照。</span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点:"></a>优缺点:</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="bullet">1.</span> 几乎是热备 (创建快照前把表上锁，创建完后立即释放)</span><br><span class="line"><span class="bullet">2.</span> 支持所有存储引擎</span><br><span class="line"><span class="bullet">3.</span> 备份速度快</span><br><span class="line"><span class="bullet">4.</span> 无需使用昂贵的商业软件(它是操作系统级别的)</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"><span class="bullet">1.</span> 无法预计服务停止时间</span><br><span class="line"><span class="bullet">2.</span> 数据如果分布在多个卷上比较麻烦 (针对存储级别而言)</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建lvm分区</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建LVM逻辑卷组</span></span><br><span class="line">vgcreate mysql /dev/sdb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建LV逻辑卷</span></span><br><span class="line">lvcreate -n lv_mysql -L 4G mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式化lvm分区</span></span><br><span class="line">mkfs.xfs /dev/mysql/lv_mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将当前数据迁移到逻辑卷上(因为只有逻辑卷上的数据才可以进行快照)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止数据库</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份所有数据文件到指定的目录文件下</span></span><br><span class="line">cd /var/lib/mysql</span><br><span class="line">tar czf /backup/mysql/mysql.tar.gz *</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挂载逻辑卷到当前mysql的数据目录下</span></span><br><span class="line">mount /dev/mysql/lv_mysql /var/lib/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将备份的数据解压到数据目录下</span></span><br><span class="line">tar xf /backup/mysql/mysql.tar.gz -C /var/lib/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改权限再重新启动</span></span><br><span class="line">chown mysql.mysql /var/lib/mysq</span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 快照备份数据库</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给数据库加读锁,防止快照时插入数据</span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash">flush table with <span class="built_in">read</span> lock;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给mysql的数据库所在的逻辑卷创建快照</span></span><br><span class="line">lvcreate -n lv_mysql_s -L 500M -s /dev/mysql/lv_mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解锁</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">unlock tables;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将逻辑卷挂载到目录里,这里创建一个临时目录</span></span><br><span class="line">mkdir /mnt/mysql</span><br><span class="line">mount -o nouuid /dev/mysql/lv_mysql_s /mnt/mysql/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 测试快照备份,此处是直接切换了datadir的路径,也可以将快照数据保存,恢复时直接用快照数据替换原路径数据</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改mysql datadir路径</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">datadir=/mnt/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启mysql</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 其他一些查看信息的命令</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘分区</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看挂载信息的命令</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看逻辑分区信息命令</span></span><br><span class="line">lvdisplay</span><br></pre></td></tr></table></figure><h2 id="方案二-基于检测binlog来进行数据同步"><a href="#方案二-基于检测binlog来进行数据同步" class="headerlink" title="方案二 基于检测binlog来进行数据同步:"></a>方案二 基于检测binlog来进行数据同步:</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍:"></a>介绍:</h3><p>利用canal进行基于<code>MySQL</code>数据库增量日志<code>(binlog)</code>解析，提供增量数据订阅和消费</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">canal 工作原理</span><br><span class="line"><span class="bullet">1.</span> canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</span><br><span class="line"><span class="bullet">2.</span> MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</span><br><span class="line"><span class="bullet">3.</span> canal 解析 binary log 对象(原始为 byte 流)</span><br></pre></td></tr></table></figure><p>官网示意图:<br><img src="https://img-blog.csdnimg.cn/7cdd65cbe549474f92d4b8b05a07fbb1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d0MzM0NTAyMTU3,size_16,color_FFFFFF,t_70#pic_center" alt="process"></p><h2 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点:"></a>优缺点:</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优点:</span><br><span class="line"><span class="bullet">1.</span> 相比于快照备份,不需要对源数据库重启或加锁.可以直接在代码层面实现</span><br><span class="line"><span class="bullet">3.</span> 与业务完全解耦,面向数据的,方便扩展,后续可以接入多个存储目的地</span><br><span class="line"><span class="bullet">4.</span> 可以对数据进行处理,可以分别根据DELETE,UPDATE,INSERT分别做不同的操作，并且可以根据biglog时间戳来更准确处理数据</span><br><span class="line">缺点:</span><br><span class="line"><span class="bullet">1.</span> 需要单独维护<span class="code">`canal服务`</span>和<span class="code">`客户端`</span>.存在开发与维护成本.并且还需要占用服务器IO,内存,带宽资源</span><br></pre></td></tr></table></figure><h3 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤:"></a>关键步骤:</h3><ol><li>确认已开启<code>mysql</code>的<code>binlog</code>,并且选择<code>ROW</code>(行)模式<ul><li><code>show variables like  &#39;log_bin&#39;;</code></li></ul></li><li>安装<code>canal</code>(github直接可以下载),下载后根据QuickStart配置参数,运行</li><li>编写客户端代码(不局限于java)<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 与canal建立长连接</span><br><span class="line"><span class="bullet">2.</span> 循环获取数据，如果获取到则进行处理</span><br><span class="line"><span class="bullet">3.</span> 数据处理，可以接入多个目的地</span><br></pre></td></tr></table></figure></li></ol><h2 id="两种方案针对报表业务的解决方案"><a href="#两种方案针对报表业务的解决方案" class="headerlink" title="两种方案针对报表业务的解决方案"></a>两种方案针对报表业务的解决方案</h2><h3 id="lvm快照备份"><a href="#lvm快照备份" class="headerlink" title="lvm快照备份"></a>lvm快照备份</h3><p>将备份切换过程编写为脚本，利用linux中corn定时执行脚本</p><p>缺点：</p><ol><li>因为要锁表甚至重启，可能会影响到生产环境。</li><li>本身对linux不是很通透，可能会出现一些预期之外的问题。</li></ol><h3 id="biglog检测增量"><a href="#biglog检测增量" class="headerlink" title="biglog检测增量"></a>biglog检测增量</h3><p>当天结束整点时，canal客户端根据超过整点后的数据的时间来新建第二天的表，同时将旧表数据复制到新表。这样可以确保每新建的一张表最多包含不大于当天的数据。</p><p>缺点：</p><ol><li>因为表数据是翻倍再递增的，所以数据量比起之前要大很多</li><li>新建表名影响到之前报表业务，之前报表也需要同步修改一下表名</li></ol><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p><img src="https://raw.githubusercontent.com/ZhuyuByte/blog/main/img/Mysql%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><p><strong>理想上来讲,应该是不会存在丢失消息,并且在当日结束后几秒内完成当日数据的隔离</strong></p><p>参考:</p><ol><li><a href="https://blog.csdn.net/qingsong3333/article/details/77418238">https://blog.csdn.net/qingsong3333/article/details/77418238</a> </li><li><a href="https://help.aliyun.com/document_detail/131141.html">https://help.aliyun.com/document_detail/131141.html</a> </li><li><a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a> </li><li>《高性能MySQL(第3版)》</li></ol>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
